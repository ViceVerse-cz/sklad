generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   
  description String?
  price       Decimal
  quantity    Int
  categories  Category[]
  actions     ActionHistory[]
}

model Category {
  id       Int       @id @default(autoincrement()) 
  name     String
  products Product[]
}

model ActionHistory {
  id         Int      @id @default(autoincrement())
  type       ActionType
  quantity   Int
  date       DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int[]
}

enum ActionType {
  RESTOCK
  SOLD
}